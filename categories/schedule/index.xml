<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Schedule - Category - Domain Flow Architecture</title><link>https://stillwater-sc.github.io/domain-flow/categories/schedule/index.html</link><description/><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 15 Feb 2017 07:24:38 -0500</lastBuildDate><atom:link href="https://stillwater-sc.github.io/domain-flow/categories/schedule/index.xml" rel="self" type="application/rss+xml"/><item><title>Free Schedule</title><link>https://stillwater-sc.github.io/domain-flow/introduction/freeschedule/index.html</link><pubDate>Wed, 15 Feb 2017 07:24:38 -0500</pubDate><guid>https://stillwater-sc.github.io/domain-flow/introduction/freeschedule/index.html</guid><description>We alluded to the fact that inherently-parallel algorithms exhibit some partial order, and not a total order, because the instructions that can execute independently do not have any explicit order among each other. This extra degree of freedom is another benefit domain flow algorithms exhibit over sequential algorithms. It allows the execution engine to organize any resource contention in a more energy, space, or time efficient way, as long the machine does not violate the dependency	relationships specified in the algorithm.</description></item><item><title>Linear Schedules</title><link>https://stillwater-sc.github.io/domain-flow/introduction/linearschedule/index.html</link><pubDate>Wed, 15 Feb 2017 07:24:38 -0500</pubDate><guid>https://stillwater-sc.github.io/domain-flow/introduction/linearschedule/index.html</guid><description>In the previous section, we saw what the computational evolution of an unconstrained parallel algorithm looks like. However, an actual physical system would have finite resources, and certainly limited operand bandwidth.
The free schedule of a parallel algorithm tends to be unrealizable as the size of the problem grows.
Let’s go through the thought experiment what the free schedule demands from a physical system. In the free schedule animation, the propagation recurrences distributing the $A$ and $B$ matrix elements throughout the 3D lattice run ‘ahead’ of the actual computational recurrence calculating the $C$ matrix elements.</description></item></channel></rss>