<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Design - Category - Domain Flow Architecture</title><link>https://stillwater-sc.github.io/domain-flow/categories/design/index.html</link><description/><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 15 Feb 2017 07:24:38 -0500</lastBuildDate><atom:link href="https://stillwater-sc.github.io/domain-flow/categories/design/index.xml" rel="self" type="application/rss+xml"/><item><title>Derivation of the matrix multiply domain flow program</title><link>https://stillwater-sc.github.io/domain-flow/introduction/derivation/index.html</link><pubDate>Wed, 15 Feb 2017 07:24:38 -0500</pubDate><guid>https://stillwater-sc.github.io/domain-flow/introduction/derivation/index.html</guid><description>The concepts of partial and total orders are essential for finding optimal domain flow algorithms. Partial orders, or Poset, are the source of high-performance, low-power execution patterns.
The Linear Algebra universe is particularly rich in partial orders, something that has been exploited for centuries 1. Matrix Computations2 by Golub, and van Loan provide a comprehensive review. What follows may be a bit technical, but keep in mind the visualizations of the previous pages as you try to visualize what the math implies.</description></item></channel></rss>