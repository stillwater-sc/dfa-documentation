<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>matrix-math on Domain Flow Architecture</title><link>https://stillwater-sc.github.io/domain-flow/categories/matrix-math/index.html</link><description>Recent content in matrix-math on Domain Flow Architecture</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Feb 2017 07:24:38 -0500</lastBuildDate><atom:link href="https://stillwater-sc.github.io/domain-flow/categories/matrix-math/index.xml" rel="self" type="application/rss+xml"/><item><title>Derivation</title><link>https://stillwater-sc.github.io/domain-flow/introduction/derivation/index.html</link><pubDate>Wed, 15 Feb 2017 07:24:38 -0500</pubDate><guid>https://stillwater-sc.github.io/domain-flow/introduction/derivation/index.html</guid><description>Remember this note?
The concepts of partial and total orders are essential for finding optimal domain flow algorithms. Poset are the source of potentially interesting solutions to high-performance, low-power execution patterns.
The Linear Algebra universe is particularly rich in partial orders, something that has been exploited for centuries. 1 Fortunately, for our discussion we can focus on the last couple of decades. The book on computing with matrices is written by Golub, and van Loan [2](#matrix computations).</description></item></channel></rss>